@page "/"
@using Circuits.ViewModels.Entities.Elements

<div class="main-page-cnt">
    <div class="navigation">

        <div class="control-block right">

            @* <div @onclick="() => { OnPenClicked(6); }" class="control-icon pen noselectable-text @(_context.PencilMode && _mode == 6 ? "activated" : "")">Tₙₚₙ</div> *@
            @* <div @onclick="() => { OnPenClicked(5); }" class="control-icon pen noselectable-text @(_context.PencilMode && _mode == 5 ? "activated" : "")">Tₚₙₚ</div> *@
            <div @onclick="() => { OnPenClicked(4); }" class="control-icon pen noselectable-text @(_context.PencilMode && _mode == 4 ? "activated" : "")">DC</div>
            <div @onclick="() => { OnPenClicked(3); }" class="control-icon pen noselectable-text @(_context.PencilMode && _mode == 3 ? "activated" : "")">I</div>
            <div @onclick="() => { OnPenClicked(2); }" class="control-icon pen noselectable-text @(_context.PencilMode && _mode == 2 ? "activated" : "")">C</div>
            <div @onclick="() => { OnPenClicked(1); }" class="control-icon pen noselectable-text @(_context.PencilMode && _mode == 1 ? "activated" : "")">R</div>
            <div @onclick="() => { OnPenClicked(0); }" class="control-icon pen noselectable-text @(_context.PencilMode && _mode == 0 ? "activated" : "")">W</div>

            <div class="icon min"
                 @onmousedown="async () => { await _navPlaneContext.ZoomDown!.Invoke(-0.1f); }"
                 @onmouseup="() => { _navPlaneContext.ZoomUp!.Invoke(); }"
                 @onmouseout="() => { _navPlaneContext.ZoomUp!.Invoke(); }">
                <div class="noselectable-text">-</div>
            </div>
            <div class="icon mag"
                 @onmousedown="async () => { await _navPlaneContext.ZoomDown!.Invoke(+0.1f); }"
                 @onmouseup="() => { _navPlaneContext.ZoomUp!.Invoke(); }"
                 @onmouseout="() => { _navPlaneContext.ZoomUp!.Invoke(); }">
                <div class="noselectable-text">+</div>
            </div>
        </div>

        <div class="control-block left">
            <div
                class="icon graph-details"
                @onclick="() => { _showGraphInspector = !_showGraphInspector; StateHasChanged(); }">

                <div class="icon-cnt">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M4.125 6.375H19.875M4.125 18.375H19.875H4.125ZM4.125 12.375H19.875H4.125Z" stroke="#B3BBC5" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>

            </div>
        </div>

        @if (_selectedElement != null!)
        {
            <div
                class="element-help-menu"
                style="@($"top: {_selectedPos.Y.ToString(_nF)}px; left: {_selectedPos.X.ToString(_nF)}px;")">

                <div class="icon" @onclick="() => { RemoveElement(_selectedElement); }">
                    <div class="noselectable-text">&#x2715;</div>
                </div>

                <div class="icon rotate"
                     @onclick="() => { RotateElement(_selectedElement); }">
                    <div class="noselectable-text">↺</div>
                </div>

                @if (_selectedElement is Transistor transistor)
                {
                    <div
                        class="icon"
                        @onclick="() => { transistor.IsFlipped = !transistor.IsFlipped; StateHasChanged(); }">
                        <div class="noselectable-text">⇄</div>
                    </div>
                }

                <div class="icon info" @onclick="OpenElementOptions">
                    <div class="noselectable-text">i</div>
                </div>
            </div>
        }

        <SchemeInspectorComponent @bind-Opened="_showGraphInspector"/>

        <NavigationPlaneComponent NavigationPlaneContext="_navPlaneContext">

                <SchemeRendererComponent
                    SchemeRendererContext="_context"
                    Scale="_navPlaneContext.Scale"
                    OnFirstPointSet="OnFirstPointSet"
                    OnSecondPointSet="OnSecondPointSet"
                    SelectedElementChanged="OnSelectElement">

                    <ElementComponent Key="typeof(Wire)">
                        <Template Context="element">
                            <WireComponent Wire="(Wire)element"/>
                        </Template>
                    </ElementComponent>

                    <ElementComponent Key="typeof(Resistor)">
                        <Template Context="element">
                            <ResistorComponent Resistor="(Resistor)element"/>
                        </Template>
                    </ElementComponent>

                    <ElementComponent Key="typeof(Capacitor)">
                        <Template Context="element">
                            <CapacitorComponent Capacitor="(Capacitor)element"/>
                        </Template>
                    </ElementComponent>

                    <ElementComponent Key="typeof(Inductor)">
                        <Template Context="element">
                            <InductorComponent Inductor="(Inductor)element"/>
                        </Template>
                    </ElementComponent>

                    <ElementComponent Key="typeof(DCSource)">
                        <Template Context="element">
                            <DCSourceComponent DCSource="(DCSource)element"/>
                        </Template>
                    </ElementComponent>

                    <ElementComponent Key="typeof(Transistor)">
                        <Template Context="element">
                            <TransistorComponent Transistor="(Transistor)element"/>
                        </Template>
                    </ElementComponent>

                </SchemeRendererComponent>

        </NavigationPlaneComponent>
    </div>
</div>


<BCHModal Width="350px"
          Height="150px"
          X="@($"{_selectedPos.X.ToString(_nF)}px")"
          Y="@($"calc({_selectedPos.Y.ToString(_nF)}px - 147px)")"
          CssClass="element-options-modal"
          CloseOnOverflowClicked="true"
          @bind-Show="_showElementOptions">
    <div class="element-options">
        <div class="line">
            <div class="text noselectable-text">Number:</div>
            <div class="input-wrapper">
                <input 
                    type="number" 
                    placeholder="Type Number"
                    @bind-value="_selectedElement!.Number"
                    @bind-value:event="oninput"/>
            </div>
        </div>
    </div>
</BCHModal>

<style>
    .bch-modal-overlay.element-options-modal {
        background: #00000077;
        z-index: 1000;
    }
</style>