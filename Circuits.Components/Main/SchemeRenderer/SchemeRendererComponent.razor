@using System.ComponentModel
<div
    id="@_id"
    class="scheme-renderer-container"
    @onclick="OnContainerClicked"
    @onmouseup="OnContainerUp"
    @onmousedown="OnContainerDown"
    @onmousedown:stopPropagation="SchemeRendererContext.PencilMode"
    @onextdrop="OnDrop"
    ondragover="event.preventDefault();">
    
    <div id="@_contentId"
         class="scheme-content">
        
        @for (int i = 0; i < 3000 / CellSize + 3; i++)
        {
            <div class="horizontal-delimiter"
                 style="@($"top: calc({CellSize}px * ({i}));")">
            </div>

            <div class="vertical-delimiter"
                 style="@($"left: calc({CellSize}px * ({i}));")">
            </div>
        }

        @foreach (var wire in _wires)
        {
            var horizontal = wire.P1.Y == wire.P2.Y;
            var horOffset = !horizontal ? "1.5px" : "0px";
            var vertOffset = horizontal ? "1.5px" : "0px";

            <div
                draggable="true"
                @ondragenter="() => { }"
                @ondragenter:preventDefault
                @onextdragstart='(e) => { OnDragStart(e, wire); }'
                @onextdragend='OnDragEnd'

                class="@($"wire {(horizontal ? "horizontal" : "vertical")} {(_selectedWire == wire ? "selected" : "")} {(_draggingWire == wire && _firstDragOver ? "dragging" : "")}")"
                style="@($"left: calc({wire.P1.X * CellSize}px - {horOffset}); top: calc({wire.P1.Y * CellSize}px - {vertOffset}); width: {Math.Abs(wire.P2.X * CellSize - wire.P1.X * CellSize)}px; height: {Math.Abs(wire.P2.Y * CellSize - wire.P1.Y * CellSize)}px;")">


                <div
                    @onclick="() => { OnWireClicked(wire); }"
                    @onclick:stopPropagation
                    onmousedown="event.stopPropagation()"
                    onmousemove="event.preventDefault()"
                    class="wire-content">

                    <div class="circle"></div>
                    <div class="circle"></div>

                </div>

            </div>
        }

        @if (_firstDragOver)
        {
            var horizontal = _draggingWire.P1.Y == _draggingWire.P2.Y;
            var horOffset = !horizontal ? "1.5px" : "0px";
            var vertOffset = horizontal ? "1.5px" : "0px";
            
            <div class="@($"wire {(horizontal ? "horizontal" : "vertical")} {(_selectedWire == _draggingWire ? "selected" : "")}")"
                style="@($"left: calc({_draggingPos.X}px - {horOffset}); top: calc({_draggingPos.Y}px - {vertOffset}); width: {Math.Abs(_draggingWire.P2.X * CellSize - _draggingWire.P1.X * CellSize)}px; height: {Math.Abs(_draggingWire.P2.Y * CellSize - _draggingWire.P1.Y * CellSize)}px;")">
                
                <div class="wire-content">
                    <div class="circle"></div>
                    <div class="circle"></div>
                </div>

            </div>
        }
        
        @if (SchemeRendererContext.PencilMode)
        {
            @if (_firstPointSet)
            {
                <div
                    style="@($"left: {(_firstPointPos.X - 10.0f).ToString(_nF)}px; top: {(_firstPointPos.Y - 10.0f).ToString(_nF)}px;")"
                    class="wire-pointer">
                    <div class="center"></div>
                </div>
            }

            <div
                style="@($"left: {(_wirePointerPos.X - 10.0f).ToString(_nF)}px; top: {(_wirePointerPos.Y - 10.0f).ToString(_nF)}px;")"
                class="@($"wire-pointer {(!_firstMouseMove ? "first" : "")}")">
                <div class="center"></div>
            </div>
        }
        
    </div>

</div>