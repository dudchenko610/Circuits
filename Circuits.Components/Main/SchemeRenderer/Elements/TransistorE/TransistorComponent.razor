@using Circuits.ViewModels.Entities.Elements
@using Circuits.Shared.Extensions
@using Circuits.Shared.Attributes
<div @key="@BipolarTransistor"
     draggable="true"
     @ondragenter="() => { }"
     @ondragenter:preventDefault
     @onextdragstart="OnDragStart"
     @onextdragstart:preventDefault="@_dragAllowed"
     @onextdragend="OnDragEnd"
     class="@($"transistor element {(BipolarTransistor.BipolarType == BipolarTransistorType.NPN ? "npn" : "pnp")} {(_selectedElement == BipolarTransistor ? "selected" : "")} {(_draggingElement == BipolarTransistor && _firstDragOver ? "dragging" : "")} {(_eventsDisabled ? "disabled" : "")} {(HighlightService.IsHighlighted(BipolarTransistor) ? "highlighted" : "")}")"
     style="@($"left: {(BipolarTransistor.P1.X - BipolarTransistor.ShiftFromTopLeft.X) * CellSize}px; top: {(BipolarTransistor.P1.Y - BipolarTransistor.ShiftFromTopLeft.Y) * CellSize}px; width: {2 * CellSize}px; height: {2 * CellSize}px;")">

    <div @onclick="OnElementClickedAsync"
         @onclick:stopPropagation
         onmousedown="event.stopPropagation()"
         onmousemove="event.preventDefault()"
         class="transistor-content"
         style="@($"transform: rotate({BipolarTransistor.Direction.GetValue<int, DirectionValueAttribute>(x => x.Angle)}deg) scale(1, {(BipolarTransistor.IsFlipped ? -1 : 1)});")">

        <div class="circle selectable"></div>
        <div class="circle selectable"></div>
        <div class="circle selectable"></div>

        <div class="main-circle">
            <div class="w2"></div>
            <div class="w3"></div>

            <div class="arrow"></div>
        </div>

        <div class="base"></div>
        <div class="w1"></div>

        <div class="w2 selectable"></div>
        <div class="w3 selectable"></div>
    </div>

</div>

@if (_draggingElement == BipolarTransistor && _firstDragOver)
{
    var draggingElement = (BipolarTransistor)_draggingElement;

    <div class="@($"transistor dragged {(BipolarTransistor.BipolarType == BipolarTransistorType.NPN ? "npn" : "pnp")} {(_selectedElement == draggingElement ? "selected" : "")} {(HighlightService.IsHighlighted(BipolarTransistor) ? "highlighted" : "")}")"
         style="@($"left: {_draggingPos.X.ToString(_nF)}px; top: {_draggingPos.Y.ToString(_nF)}px; width: {2 * CellSize}px; height: {2 * CellSize}px;")">

        <div class="transistor-content" 
             style="@($"transform: rotate({BipolarTransistor.Direction.GetValue<int, DirectionValueAttribute>(x => x.Angle)}deg) scale(1, {(BipolarTransistor.IsFlipped ? -1 : 1)});")">
            <div class="circle selectable"></div>
            <div class="circle selectable"></div>
            <div class="circle selectable"></div>

            <div class="main-circle">
                <div class="w2"></div>
                <div class="w3"></div>

                <div class="arrow"></div>
            </div>

            <div class="base"></div>
            <div class="w1"></div>

            <div class="w2 selectable"></div>
            <div class="w3 selectable"></div>

        </div>

    </div>
}