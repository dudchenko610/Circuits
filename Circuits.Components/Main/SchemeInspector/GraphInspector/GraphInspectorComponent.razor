@using Circuits.ViewModels.Entities.Elements
@using Circuits.ViewModels.Entities.Structures
<div class="graph-inspector scroll">

    <div class="scroller">

        <div class="commands">
            <ControlButtonComponent Label="Build Branches" OnClick="OnBuildBranchesClicked"/>
            <ControlButtonComponent Label="Build Spanning Trees" OnClick="OnBuildSpanningTrees"/>
            <ControlButtonComponent Label="Find Independent Circuits" OnClick="OnFindIndependentCircuits"/>
            <ControlButtonComponent Label="Perform all steps" OnClick="OnPerformAllSteps"/>
            <ControlButtonComponent Label="Clear Scheme" OnClick="OnClearScheme"/>
        </div>

        <div class="separator">
            <div class="line"></div>
        </div>

        <div class="commands">
            <ControlButtonComponent Label="Highlight Spanning Trees" OnClick="OnHighlightSpanningTrees"/>
            <ControlButtonComponent Label="Highlight Leftover Branches" OnClick="OnHighlightLeftoverBranches"/>
            <ControlButtonComponent Label="Clear Selection" OnClick="OnClearSelection"/>
        </div>

        <div class="separator">
            <div class="line"></div>
        </div>

        <div class="selections-block">
            <div class="selections">
                <BCHSelect TItem="Element"
                           Options="@SchemeService.Elements"
                           Height="300"
                           Filtering="false"
                           Grouping="true"
                           MultipleSelect="true"
                           DefaultText="Elements"
                           ElementNamePredicate="x => x.GetType().Name.ToLower()"
                           GroupPredicate='x => x.GetType().Name'
                           GroupNamePredicate='x => $"{x.GetType().Name}s"'
                           SelectedItems="_selectedElements"
                           OnSelectItem="(e) => { OnElementSelected(e, true); }"
                           OnDeselectItem="(e) => { OnElementSelected(e, false); }">

                    <RowTemplate Context="element">
                        <div class="element-name">
                            <div class="name noselectable-text">@element.GetType().Name[0]</div>
                            <i class="noselectable-text">@element.Number</i>
                        </div>
                    </RowTemplate>

                </BCHSelect>

                <BCHSelect TItem="Branch"
                           Options="@SchemeService.Branches"
                           Height="300"
                           Filtering="false"
                           Grouping="false"
                           MultipleSelect="true"
                           DefaultText="Branches"
                           ElementNamePredicate='x => $"branch {((List<Branch>)SchemeService.Branches).IndexOf(x)}"'
                           SelectedItems="_selectedBranches"
                           OnSelectItem="(e) => { OnBranchSelected(e, true); }"
                           OnDeselectItem="(e) => { OnBranchSelected(e, false); }">

                    <RowTemplate Context="branch">
                        <div class="branch-wrapper">
                            <div class="name noselectable-text">Branch <i class="noselectable-text">@($"{((List<Branch>)SchemeService.Branches).IndexOf(branch)}")</i></div>
                            <div class="controls">
                                <div
                                    @onclick="() => { OnShowBranchDirectionClicked(branch); }"
                                    @onclick:stopPropagation
                                    class="@($"icon {(HighlightService.ShouldShowDirection(branch) ? "selected" : "")}")">
                                    D
                                </div>
                            </div>
                        </div>
                    </RowTemplate>

                </BCHSelect>

            </div>

            <div class="circuits">
                @for (var i = 0; i < SchemeService.Graphs.Count; i++)
                {
                    var graph = SchemeService.Graphs[i];

                    <BCHSelect TItem="Circuit"
                               Options="@graph.Circuits"
                               Height="300"
                               Filtering="false"
                               Grouping="false"
                               MultipleSelect="true"
                               DefaultText="@($"Graph {i}")"
                               ElementNamePredicate='x => $"circuit {graph.Circuits.IndexOf(x)}"'
                               OnSelectItem="(e) => { OnSelectCircuit(e, true); }"
                               OnDeselectItem="(e) => { OnSelectCircuit(e, false); }">

                        <RowTemplate Context="circuit">
                            <div class="circuit-wrapper">
                                <div class="name noselectable-text">Circuit <i class="noselectable-text">@(graph.Circuits.IndexOf(circuit))</i></div>
                                <div class="controls">
                                    <div
                                        @onclick="() => { OnShowCircuitDirectionClicked(circuit); }"
                                        @onclick:stopPropagation
                                        class="@($"icon {(HighlightService.ShouldShowDirection(circuit) ? "selected" : "")}")">
                                        D
                                    </div>
                                </div>
                            </div>
                        </RowTemplate>

                    </BCHSelect>
                }
            </div>
        </div>

    </div>

</div>

<style>
    .graph-inspector .bch-option.selected .element-name i,
    .graph-inspector .bch-option.selected .element-name .name {
        color: #FEFEFE;
    }
    
    .graph-inspector > .scroller > .selections-block > .circuits > .bch-select-container {
        display: inline-block;
        margin: 5px;
    }
</style>