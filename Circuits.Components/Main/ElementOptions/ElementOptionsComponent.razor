@using Circuits.ViewModels.Entities.Elements

<div class="element-help-menu">

    <div class="icon" @onclick="async () => { await OnRemoveElement.InvokeAsync(SelectedElement!); }">
        <div class="noselectable-text">&#x2715;</div>
    </div>

    <div class="icon rotate"
         @onclick="async () => { await OnRotateElement.InvokeAsync(SelectedElement!); }">
        <div class="noselectable-text">↺</div>
    </div>

    @if (SelectedElement is Transistor transistor)
    {
        <div class="icon"
             @onclick="async () => { await OnTransistorFlip.InvokeAsync(transistor); }">
            <div class="noselectable-text">⇄</div>
        </div>
    }

    <div class="icon info" @onclick="async () => { await OnOpenElementOptions.InvokeAsync(); }">
        <div class="noselectable-text">E</div>
    </div>

    <div class="separator"></div>

    <div class="icon info" @onclick="async () => { OnShowCurrent(); await OnCloseSelected.InvokeAsync(); }">
        <div class="noselectable-text">I</div>
    </div>

    @if (SelectedElement is not (Wire or Transistor))
    {
        <div class="icon info" @onclick="() => { }">
            <div class="noselectable-text">V</div>
        </div>
    }

    @if (SelectedElement is Capacitor)
    {
        <div class="icon info" @onclick="() => { }">
            <div class="noselectable-text">Q</div>
        </div>
    }

    @if (SelectedElement is Inductor)
    {
        <div class="icon info" @onclick="() => { }">
            <div class="noselectable-text">Ψ</div>
        </div>
    }

</div>