<div id="@_containerId"
     class="graph-container scroll">

    <BCHZoom ZoomContext="_zoomContext"
             ShowScrollbars="false"
             BoundsByParent="true"
             UseConstraints="true"
             ZoomOnMouseWheel="true">
        <svg class="graph"
             width="@($"{SvgWidth.ToString(_nF)}px")"
             height="@($"{SvgHeight.ToString(_nF)}px")">

            @{
                var svgWidth = SvgWidth;
                var svgHeight = SvgHeight;

                var dataCount = DataArray.Count == 0 ? 1 : DataArray.Count;

                var verticalLineCount = svgHeight / CellHeight;

                var horizontalStartIndex = (int)_zoomPos.X / CellWidth;
                var horizontalEndIndex = horizontalStartIndex + (int)(_zoomBounds.X / CellWidth) + 1;
                var horizontalLineCount = (int)svgWidth / CellWidth;

                var verticalStartIndex = (int)_zoomPos.Y / CellHeight;
                var verticalEndIndex = verticalStartIndex + (int)(_zoomBounds.Y / CellHeight) + 1;

                var graphStartIndex = (int)(((_zoomPos.X - CellWidth) / svgWidth) * dataCount) - 1;
                graphStartIndex = Math.Clamp(graphStartIndex, 0, dataCount - 1);

                var graphEndIndex = graphStartIndex + (int)(((_zoomBounds.X + CellWidth) / svgWidth) * dataCount) + 3;
                graphEndIndex = Math.Clamp(graphEndIndex, 0, dataCount - 1);

                var median = svgHeight * 0.5f;
                var xRatio = CellWidth / (float)CellXValuesCount;

                var y0 = _zoomPos.Y;
                var y1 = _zoomPos.Y + _zoomBounds.Y;
            }

            @for (var i = verticalStartIndex; i <= verticalEndIndex; i++)
            {
                var yOffset = (i / verticalLineCount) * 100;
                var yOffsetStr = $"{yOffset.ToString(_nF)}%";

                <line x1="0" y1="@yOffsetStr" x2="100%" y2="@yOffsetStr" class="grid-line" />
            }

            @for (var i = horizontalStartIndex; i <= horizontalEndIndex; i++)
            {
                var xOffset = (i / (float)horizontalLineCount) * 100;
                var xOffsetStr = $"{xOffset.ToString(_nF)}%";

                <line x1="@xOffsetStr" y1="0" x2="@xOffsetStr" y2="100%" class="grid-line" />
                @* <text><text x="@xOffsetStr" y="@((svgHeight * 0.5f - 1.0f).ToString(_nF))" class="axis-text noselectable-text">@XLabel(i)</text></text> *@
            }

            <line x1="0" y1="50%" x2="100%" y2="50%" class="axis-line"/>

            @for (var i = graphStartIndex; i < graphEndIndex; i++)
            {
                var curr = FuncModifier.Invoke(DataArray[i + 0]);
                var next = FuncModifier.Invoke(DataArray[i + 1]);

                var currVal = median - CellHeight * curr / CellYValues;
                var nextVal = median - CellHeight * next / CellYValues;

                if ((currVal < y0 && nextVal < y0) || (currVal > y1 && nextVal > y1)) continue;

                <line x1="@((i * xRatio).ToString(_nF))"
                      y1="@(currVal.ToString(_nF))"
                      x2="@(((i + 1) * xRatio).ToString(_nF))"
                      y2="@(nextVal.ToString(_nF))"
                      class="graph-line"/>
            }

        </svg>
    </BCHZoom>

    @{
        var svgHeight = SvgHeight;
        var median = svgHeight * 0.5f;
        const int dialHeight = 8;
        const int offset = 4;

        var horizontalStartIndex = (int)_zoomPos.X / CellWidth;
        var horizontalEndIndex = horizontalStartIndex + (int)(_zoomBounds.X / CellWidth) + 1;
        var verticalStartIndex = (int)_zoomPos.Y / CellHeight;
        var verticalEndIndex = verticalStartIndex + (int)(_zoomBounds.Y / CellHeight) + 1;

        var topOffset = (median - _zoomPos.Y) * _zoomContext.Scale - dialHeight;
        var leftOffset = -_zoomPos.X * _zoomContext.Scale;
        var topVertOffset = -_zoomPos.Y * _zoomContext.Scale;
        var cellWidth = CellWidth * _zoomContext.Scale;
        var cellHeight = CellHeight * _zoomContext.Scale;
    }

    <div class="dial horizontal-numbers"
         style="@($"top: max({offset}px, min(calc(100% - {(dialHeight + offset).ToString(_nF)}px), {(topOffset - offset).ToString(_nF)}px)); left: {(leftOffset + offset).ToString(_nF)}px;")">
        @for (var i = horizontalStartIndex; i <= horizontalEndIndex; i++)
        {
            switch (_zoomContext.Scale)
            {
                case < 1.6f:
                {
                    if (i % 5 == 0)
                    {
                        <div style="@($"left: {(i * cellWidth).ToString(_nF)}px;")" class="text noselectable-text">@XLabel(i)</div>
                    }
                    break;
                }
                case < 3.1f:
                {
                    if (i % 2 == 0)
                    {
                        <div style="@($"left: {(i * cellWidth).ToString(_nF)}px;")" class="text noselectable-text">@XLabel(i)</div>
                    }
                    break;
                }
                default:
                    <div style="@($"left: {(i * cellWidth).ToString(_nF)}px;")" class="text noselectable-text">@XLabel(i)</div>
                    break;
            }
        }
    </div>

    <div class="dial vertical-numbers" style="@($"left: {offset}px; top: calc({(topVertOffset - offset).ToString(_nF)}px - {dialHeight.ToString(_nF)}px);")">
        @for (var i = verticalStartIndex; i <= verticalEndIndex; i++)
        {
            var index = (int)(median / CellHeight) - i;
            if (index == 0) continue;
            
            switch (_zoomContext.Scale)
            {
                case < 1.6f:
                {
                    if (index % 5 == 0)
                    {
                        <div style="@($"top: {(i * cellHeight).ToString(_nF)}px;")" class="text noselectable-text">@YLabel(index)</div>
                    }
                    break;
                }
                case < 3.1f:
                {
                    if (index % 2 == 0)
                    {
                        <div style="@($"top: {(i * cellHeight).ToString(_nF)}px;")" class="text noselectable-text">@YLabel(index)</div>
                    }
                    break;
                }
                default:
                    <div style="@($"top: {(i * cellHeight).ToString(_nF)}px;")" class="text noselectable-text">@YLabel(index)</div>

                    break;
            }
        }
    </div>
</div>